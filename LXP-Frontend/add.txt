import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { FiXCircle } from 'react-icons/fi';
import '../Styles/AddCourse.css';

const CourseForm = () => {
  const [files, setFiles] = useState([]);
  const [form, setForm] = useState({
    title: '',
    category: '',
    level: '',
    duration: '',
    description: ''
  });
  const [errors, setErrors] = useState({});

  const onDrop = useCallback(acceptedFiles => {
    if (acceptedFiles.length > 1) {
      alert("You can only upload one file");
      return;
    }

    const file = acceptedFiles[0];
    const fileType = file.type;
    const validImageTypes = ['image/jpeg', 'image/png', 'image/jpg'];

    if (!validImageTypes.includes(fileType)) {
      alert("Invalid file type. The accepted file types are .jpg, .png, .jpeg");
      return;
    }

    if (file.size > 250000) {
      alert("File size exceeds the limit of 250KB");
      return;
    }

    setFiles([file]);
    setErrors({ ...errors, thumbnail: null });
  }, [errors]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: 'image/*', multiple: false });

  const removeFile = file => () => {
    setFiles([]);
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setForm({ ...form, [name]: value });

    if (!value) {
      setErrors({ ...errors, [name]: `${name} is required` });
    } else {
      setErrors({ ...errors, [name]: null });
    }
  };

  const handleSubmit = (event) => {
    event.preventDefault();

    const newErrors = {};
    Object.keys(form).forEach((key) => {
      if (!form[key]) {
        newErrors[key] = `${key} is required`;
      }
    });

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
    } else {
      // Submit the form
    }
  };

  return (
    <>
      <h2>Course Creation</h2>
      <hr/>
      <div className="course-form">
        <form onSubmit={handleSubmit}>
          <div className='addcourse'>
            <label>
              Course Title:
              <input type="text" name="title" onChange={handleInputChange} />
              {errors.title && <p className="error">{errors.title}</p>}
            </label>
            <label>
              Course Category:
              <select name="category" onChange={handleInputChange}>
                <option value="">Select Category</option>
                {/* Add your categories here */}
              </select>
              {errors.category && <p className="error">{errors.category}</p>}
            </label>
            <label>
              Course Level:
              <select name="level" onChange={handleInputChange}>
                <option value="">Select Level</option>
                {/* Add your levels here */}
              </select>
              {errors.level && <p className="error">{errors.level}</p>}
            </label>
            <label>
              Course Duration (in Days):
              <input type="number" name="duration" onChange={handleInputChange} />
              {errors.duration && <p className="error">{errors.duration}</p>}
            </label>
            <label>
              Course Description:
              <textarea name="description" onChange={handleInputChange}></textarea>
              {errors.description && <p className="error">{errors.description}</p>}
            </label>
            <label htmlFor=""> Course Thumbnail:</label>
            <div {...getRootProps()} className="course-thumbnail">
              <input {...getInputProps()} />
              {isDragActive ? "Drop files here..." : "Drag & Drop files here or Click to upload"}
            </div>
            {errors.thumbnail && <p className="error">{errors.thumbnail}</p>}
            {files.map(file => (
              <div key={file.path}>
                {file.path} - {file.size} bytes
                <FiXCircle onClick={removeFile(file)} />
              </div>
            ))}
            <input type="submit" value="CREATE COURSE"  />
          </div>
        </form>
      </div>
    </>
  );
}

export default CourseForm;


///  add course with columns

import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { FiXCircle } from 'react-icons/fi';
import { Row, Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';
import '../Styles/AddCourse.css';

const CourseForm = () => {
  const [files, setFiles] = useState([]);
  const [form, setForm] = useState({
    title: '',
    category: '',
    level: '',
    duration: '',
    description: ''
  });

  const onDrop = useCallback(acceptedFiles => {
    setFiles(prevFiles => [...prevFiles, ...acceptedFiles]);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: 'image/jpeg, image/png', multiple: true });

  const removeFile = file => () => {
    const newFiles = [...files];
    newFiles.splice(newFiles.indexOf(file), 1);
    setFiles(newFiles);
  };

  const handleChange = (e) => {
    setForm({...form, [e.target.name]: e.target.value});
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Form validation logic
    if (form.title.length < 5 || form.title.length > 50) {
      alert('Course title must be between 5 and 50 characters.');
      return;
    }

    if (!form.category) {
      alert('Please select a category.');
      return;
    }

    if (!form.level) {
      alert('Please select a level.');
      return;
    }

    const wordCount = form.description.split(' ').length;
    if (wordCount > 250) {
      alert('Course description must be 250 words or less.');
      return;
    }

    if (files.length === 0) {
      alert('Please upload a thumbnail.');
      return;
    }

    // If all validations pass, you can handle the form data as needed
    console.log('Form data:', form);
    console.log('Files:', files);
  };

  return (
    <>
      <h2>Course Creation</h2>
      <hr/>
      <Form className="course-form" onSubmit={handleSubmit}>
        <Row form>
          <Col md={6}>
            <FormGroup>
              <Label for="title">Course Title:</Label>
              <Input type="text" name="title" value={form.title} onChange={handleChange} required />
            </FormGroup>
          </Col>
          <Col md={6}>
            <FormGroup>
              <Label for="category">Course Category:</Label>
              <Input type="select" name="category" value={form.category} onChange={handleChange} required>
                <option value="">Select Category</option>
                <option value="Technical">Technical</option>
                <option value="communication">Communication</option>
                <option value="Behavioural">Behavioural</option>
              </Input>
            </FormGroup>
          </Col>
        </Row>
        <Row form>
          <Col md={6}>
            <FormGroup>
              <Label for="level">Course Level:</Label>
              <Input type="select" name="level" value={form.level} onChange={handleChange} required>
                <option value="">Select Level</option>
                <option value="beginner">Beginner</option>
                <option value="intermediate">Intermediate</option>
                <option value="advanced">Advanced</option>
              </Input>
            </FormGroup>
          </Col>
          <Col md={6}>
            <FormGroup>
              <Label for="duration">Course Duration (in Days):</Label>
              <Input type="number" name="duration" value={form.duration} onChange={handleChange} required />
            </FormGroup>
          </Col>
        </Row>
        <FormGroup>
          <Label for="description">Course Description:</Label>
          <Input type="textarea" name="description" value={form.description} onChange={handleChange} required />
        </FormGroup>
        <FormGroup>
          <Label for="thumbnail">Course Thumbnail:</Label>
          <div {...getRootProps()} className="course-thumbnail">
            <input {...getInputProps()} />
            {isDragActive ? "Drop files here..." : "Drag & Drop files here or Click to upload"}
          </div>
          {files.map(file => (
            <div key={file.path}>
              {file.path} - {file.size} bytes
              <FiXCircle onClick={removeFile(file)} />
            </div>
          ))}
        </FormGroup>
        <Button type="submit" id='rz-btn' >CREATE COURSE</Button>
      </Form>
    </>
  );
}

export default CourseForm;


// css code 

.course-form {
    width: 70vh;
    height: 80dvh;
    margin: 0 auto;
    padding:  5px 5px 0px 5px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  }

  h2,hr{
    margin: 20%;
  }
  
  .course-form label {
    display: block;
    margin-bottom: 7px;
    color: #555;
    font-size: 13px;
    font-weight: 500;
  }
  
  .course-form input[type="text"],
  .course-form input[type="number"],
  .course-form select {
    width: 100%;
    height: 36px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 10px;
    color: #333;
  }

  .course-form textarea{
    width: 100%;
    height: 80px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 10px;
    color: #333;
  }
  
  .course-form .course-thumbnail {
    width: 100%;
    height: 100px;
    border: 2px dashed #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #bbb;
    margin-top: 7px;
  }
  
  .course-form input[type="submit"] {
    display: block;
    width: 20vh;
    margin-left: 20vh;
    padding: 10px;
    background-color: #27235c!important ;
    color: #fff;
    border: none;
    border-radius: 4px;
    margin-top: 20px;
    cursor: pointer;
    font-size: 16px;
  }
  
  #rz-btn{
    background-color: #27235c!important ;
  margin-left: 20vh;
  }
  
  .addcourse{
    margin: 7%;
    
   
  }
  
  p {
    color: red;
  }

  .error {
    min-height: 20px;
    color: red;
    font-size: 0.8em;
  }
  